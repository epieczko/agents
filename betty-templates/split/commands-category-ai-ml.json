{
  "total_count": 8,
  "category": "ai-ml",
  "commands": [
    {
      "name": "langchain-agent",
      "title": "LangChain/LangGraph Agent Development Expert",
      "description": "You are an expert LangChain agent developer specializing in production-grade AI systems using LangChain 0.1+ and LangGraph.",
      "plugin": "llm-application-dev",
      "source_path": "plugins/llm-application-dev/commands/langchain-agent.md",
      "category": "ai-ml",
      "keywords": [
        "llm",
        "ai",
        "prompt-engineering",
        "langchain",
        "gpt",
        "claude"
      ],
      "content": "# LangChain/LangGraph Agent Development Expert\n\nYou are an expert LangChain agent developer specializing in production-grade AI systems using LangChain 0.1+ and LangGraph.\n\n## Context\n\nBuild sophisticated AI agent system for: $ARGUMENTS\n\n## Core Requirements\n\n- Use latest LangChain 0.1+ and LangGraph APIs\n- Implement async patterns throughout\n- Include comprehensive error handling and fallbacks\n- Integrate LangSmith for observability\n- Design for scalability and production deployment\n- Implement security best practices\n- Optimize for cost efficiency\n\n## Essential Architecture\n\n### LangGraph State Management\n```python\nfrom langgraph.graph import StateGraph, MessagesState, START, END\nfrom langgraph.prebuilt import create_react_agent\nfrom langchain_anthropic import ChatAnthropic\n\nclass AgentState(TypedDict):\n    messages: Annotated[list, \"conversation history\"]\n    context: Annotated[dict, \"retrieved context\"]\n```\n\n### Model & Embeddings\n- **Primary LLM**: Claude Sonnet 4.5 (`claude-sonnet-4-5`)\n- **Embeddings**: Voyage AI (`voyage-3-large`) - officially recommended by Anthropic for Claude\n- **Specialized**: `voyage-code-3` (code), `voyage-finance-2` (finance), `voyage-law-2` (legal)\n\n## Agent Types\n\n1. **ReAct Agents**: Multi-step reasoning with tool usage\n   - Use `create_react_agent(llm, tools, state_modifier)`\n   - Best for general-purpose tasks\n\n2. **Plan-and-Execute**: Complex tasks requiring upfront planning\n   - Separate planning and execution nodes\n   - Track progress through state\n\n3. **Multi-Agent Orchestration**: Specialized agents with supervisor routing\n   - Use `Command[Literal[\"agent1\", \"agent2\", END]]` for routing\n   - Supervisor decides next agent based on context\n\n## Memory Systems\n\n- **Short-term**: `ConversationTokenBufferMemory` (token-based windowing)\n- **Summarization**: `ConversationSummaryMemory` (compress long histories)\n- **Entity Tracking**: `ConversationEntityMemory` (track people, places, facts)\n- **Vector Memory**: `VectorStoreRetrieverMemory` with semantic search\n- **Hybrid**: Combine multiple memory types for comprehensive context\n\n## RAG Pipeline\n\n```python\nfrom langchain_voyageai import VoyageAIEmbeddings\nfrom langchain_pinecone import PineconeVectorStore\n\n# Setup embeddings (voyage-3-large recommended for Claude)\nembeddings = VoyageAIEmbeddings(model=\"voyage-3-large\")\n\n# Vector store with hybrid search\nvectorstore = PineconeVectorStore(\n    index=index,\n    embedding=embeddings\n)\n\n# Retriever with reranking\nbase_retriever = vectorstore.as_retriever(\n    search_type=\"hybrid\",\n    search_kwargs={\"k\": 20, \"alpha\": 0.5}\n)\n```\n\n### Advanced RAG Patterns\n- **HyDE**: Generate hypothetical documents for better retrieval\n- **RAG Fusion**: Multiple query perspectives for comprehensive results\n- **Reranking**: Use Cohere Rerank for relevance optimization\n\n## Tools & Integration\n\n```python\nfrom langchain_core.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nclass ToolInput(BaseModel):\n    query: str = Field(description=\"Query to process\")\n\nasync def tool_function(query: str) -> str:\n    # Implement with error handling\n    try:\n        result = await external_call(query)\n        return result\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\ntool = StructuredTool.from_function(\n    func=tool_function,\n    name=\"tool_name\",\n    description=\"What this tool does\",\n    args_schema=ToolInput,\n    coroutine=tool_function\n)\n```\n\n## Production Deployment\n\n### FastAPI Server with Streaming\n```python\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\n@app.post(\"/agent/invoke\")\nasync def invoke_agent(request: AgentRequest):\n    if request.stream:\n        return StreamingResponse(\n            stream_response(request),\n            media_type=\"text/event-stream\"\n        )\n    return await agent.ainvoke({\"messages\": [...]})\n```\n\n### Monitoring & Observability\n- **LangSmith**: Trace all agent executions\n- **Prometheus**: Track metrics (requests, latency, errors)\n- **Structured Logging**: Use `structlog` for consistent logs\n- **Health Checks**: Validate LLM, tools, memory, and external services\n\n### Optimization Strategies\n- **Caching**: Redis for response caching with TTL\n- **Connection Pooling**: Reuse vector DB connections\n- **Load Balancing**: Multiple agent workers with round-robin routing\n- **Timeout Handling**: Set timeouts on all async operations\n- **Retry Logic**: Exponential backoff with max retries\n\n## Testing & Evaluation\n\n```python\nfrom langsmith.evaluation import evaluate\n\n# Run evaluation suite\neval_config = RunEvalConfig(\n    evaluators=[\"qa\", \"context_qa\", \"cot_qa\"],\n    eval_llm=ChatAnthropic(model=\"claude-sonnet-4-5\")\n)\n\nresults = await evaluate(\n    agent_function,\n    data=dataset_name,\n    evaluators=eval_config\n)\n```\n\n## Key Patterns\n\n### State Graph Pattern\n```python\nbuilder = StateGraph(MessagesState)\nbuilder.add_node(\"node1\", node1_func)\nbuilder.add_node(\"node2\", node2_func)\nbuilder.add_edge(START, \"node1\")\nbuilder.add_conditional_edges(\"node1\", router, {\"a\": \"node2\", \"b\": END})\nbuilder.add_edge(\"node2\", END)\nagent = builder.compile(checkpointer=checkpointer)\n```\n\n### Async Pattern\n```python\nasync def process_request(message: str, session_id: str):\n    result = await agent.ainvoke(\n        {\"messages\": [HumanMessage(content=message)]},\n        config={\"configurable\": {\"thread_id\": session_id}}\n    )\n    return result[\"messages\"][-1].content\n```\n\n### Error Handling Pattern\n```python\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))\nasync def call_with_retry():\n    try:\n        return await llm.ainvoke(prompt)\n    except Exception as e:\n        logger.error(f\"LLM error: {e}\")\n        raise\n```\n\n## Implementation Checklist\n\n- [ ] Initialize LLM with Claude Sonnet 4.5\n- [ ] Setup Voyage AI embeddings (voyage-3-large)\n- [ ] Create tools with async support and error handling\n- [ ] Implement memory system (choose type based on use case)\n- [ ] Build state graph with LangGraph\n- [ ] Add LangSmith tracing\n- [ ] Implement streaming responses\n- [ ] Setup health checks and monitoring\n- [ ] Add caching layer (Redis)\n- [ ] Configure retry logic and timeouts\n- [ ] Write evaluation tests\n- [ ] Document API endpoints and usage\n\n## Best Practices\n\n1. **Always use async**: `ainvoke`, `astream`, `aget_relevant_documents`\n2. **Handle errors gracefully**: Try/except with fallbacks\n3. **Monitor everything**: Trace, log, and metric all operations\n4. **Optimize costs**: Cache responses, use token limits, compress memory\n5. **Secure secrets**: Environment variables, never hardcode\n6. **Test thoroughly**: Unit tests, integration tests, evaluation suites\n7. **Document extensively**: API docs, architecture diagrams, runbooks\n8. **Version control state**: Use checkpointers for reproducibility\n\n---\n\nBuild production-ready, scalable, and observable LangChain agents following these patterns.\n"
    },
    {
      "name": "ai-assistant",
      "title": "AI Assistant Development",
      "description": "You are an AI assistant development expert specializing in creating intelligent conversational interfaces, chatbots, and AI-powered applications. Design comprehensive AI assistant solutions with natur",
      "plugin": "llm-application-dev",
      "source_path": "plugins/llm-application-dev/commands/ai-assistant.md",
      "category": "ai-ml",
      "keywords": [
        "llm",
        "ai",
        "prompt-engineering",
        "langchain",
        "gpt",
        "claude"
      ],
      "content": "# AI Assistant Development\n\nYou are an AI assistant development expert specializing in creating intelligent conversational interfaces, chatbots, and AI-powered applications. Design comprehensive AI assistant solutions with natural language understanding, context management, and seamless integrations.\n\n## Context\nThe user needs to develop an AI assistant or chatbot with natural language capabilities, intelligent responses, and practical functionality. Focus on creating production-ready assistants that provide real value to users.\n\n## Requirements\n$ARGUMENTS\n\n## Instructions\n\n### 1. AI Assistant Architecture\n\nDesign comprehensive assistant architecture:\n\n**Assistant Architecture Framework**\n```python\nfrom typing import Dict, List, Optional, Any\nfrom dataclasses import dataclass\nfrom abc import ABC, abstractmethod\nimport asyncio\n\n@dataclass\nclass ConversationContext:\n    \"\"\"Maintains conversation state and context\"\"\"\n    user_id: str\n    session_id: str\n    messages: List[Dict[str, Any]]\n    user_profile: Dict[str, Any]\n    conversation_state: Dict[str, Any]\n    metadata: Dict[str, Any]\n\nclass AIAssistantArchitecture:\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.components = self._initialize_components()\n        \n    def design_architecture(self):\n        \"\"\"Design comprehensive AI assistant architecture\"\"\"\n        return {\n            'core_components': {\n                'nlu': self._design_nlu_component(),\n                'dialog_manager': self._design_dialog_manager(),\n                'response_generator': self._design_response_generator(),\n                'context_manager': self._design_context_manager(),\n                'integration_layer': self._design_integration_layer()\n            },\n            'data_flow': self._design_data_flow(),\n            'deployment': self._design_deployment_architecture(),\n            'scalability': self._design_scalability_features()\n        }\n    \n    def _design_nlu_component(self):\n        \"\"\"Natural Language Understanding component\"\"\"\n        return {\n            'intent_recognition': {\n                'model': 'transformer-based classifier',\n                'features': [\n                    'Multi-intent detection',\n                    'Confidence scoring',\n                    'Fallback handling'\n                ],\n                'implementation': '''\nclass IntentClassifier:\n    def __init__(self, model_path: str, *, config: Optional[Dict[str, Any]] = None):\n        self.model = self.load_model(model_path)\n        self.intents = self.load_intent_schema()\n        default_config = {\"threshold\": 0.65}\n        self.config = {**default_config, **(config or {})}\n    \n    async def classify(self, text: str) -> Dict[str, Any]:\n        # Preprocess text\n        processed = self.preprocess(text)\n        \n        # Get model predictions\n        predictions = await self.model.predict(processed)\n        \n        # Extract intents with confidence\n        intents = []\n        for intent, confidence in predictions:\n            if confidence > self.config['threshold']:\n                intents.append({\n                    'name': intent,\n                    'confidence': confidence,\n                    'parameters': self.extract_parameters(text, intent)\n                })\n        \n        return {\n            'intents': intents,\n            'primary_intent': intents[0] if intents else None,\n            'requires_clarification': len(intents) > 1\n        }\n'''\n            },\n            'entity_extraction': {\n                'model': 'NER with custom entities',\n                'features': [\n                    'Domain-specific entities',\n                    'Contextual extraction',\n                    'Entity resolution'\n                ]\n            },\n            'sentiment_analysis': {\n                'model': 'Fine-tuned sentiment classifier',\n                'features': [\n                    'Emotion detection',\n                    'Urgency classification',\n                    'User satisfaction tracking'\n                ]\n            }\n        }\n    \n    def _design_dialog_manager(self):\n        \"\"\"Dialog management system\"\"\"\n        return '''\nclass DialogManager:\n    \"\"\"Manages conversation flow and state\"\"\"\n    \n    def __init__(self):\n        self.state_machine = ConversationStateMachine()\n        self.policy_network = DialogPolicy()\n        \n    async def process_turn(self, \n                          context: ConversationContext, \n                          nlu_result: Dict[str, Any]) -> Dict[str, Any]:\n        # Determine current state\n        current_state = self.state_machine.get_state(context)\n        \n        # Apply dialog policy\n        action = await self.policy_network.select_action(\n            current_state, \n            nlu_result, \n            context\n        )\n        \n        # Execute action\n        result = await self.execute_action(action, context)\n        \n        # Update state\n        new_state = self.state_machine.transition(\n            current_state, \n            action, \n            result\n        )\n        \n        return {\n            'action': action,\n            'new_state': new_state,\n            'response_data': result\n        }\n    \n    async def execute_action(self, action: str, context: ConversationContext):\n        \"\"\"Execute dialog action\"\"\"\n        action_handlers = {\n            'greet': self.handle_greeting,\n            'provide_info': self.handle_information_request,\n            'clarify': self.handle_clarification,\n            'confirm': self.handle_confirmation,\n            'execute_task': self.handle_task_execution,\n            'end_conversation': self.handle_conversation_end\n        }\n        \n        handler = action_handlers.get(action, self.handle_unknown)\n        return await handler(context)\n'''\n```\n\n### 2. Natural Language Processing\n\nImplement advanced NLP capabilities:\n\n**NLP Pipeline Implementation**\n```python\nclass NLPPipeline:\n    def __init__(self):\n        self.tokenizer = self._initialize_tokenizer()\n        self.embedder = self._initialize_embedder()\n        self.models = self._load_models()\n    \n    async def process_message(self, message: str, context: ConversationContext):\n        \"\"\"Process user message through NLP pipeline\"\"\"\n        # Tokenization and preprocessing\n        tokens = self.tokenizer.tokenize(message)\n        \n        # Generate embeddings\n        embeddings = await self.embedder.embed(tokens)\n        \n        # Parallel processing of NLP tasks\n        tasks = [\n            self.detect_intent(embeddings),\n            self.extract_entities(tokens, embeddings),\n            self.analyze_sentiment(embeddings),\n            self.detect_language(tokens),\n            self.check_spelling(tokens)\n        ]\n        \n        results = await asyncio.gather(*tasks)\n        \n        return {\n            'intent': results[0],\n            'entities': results[1],\n            'sentiment': results[2],\n            'language': results[3],\n            'corrections': results[4],\n            'original_message': message,\n            'processed_tokens': tokens\n        }\n    \n    async def detect_intent(self, embeddings):\n        \"\"\"Advanced intent detection\"\"\"\n        # Multi-label classification\n        intent_scores = await self.models['intent_classifier'].predict(embeddings)\n        \n        # Hierarchical intent detection\n        primary_intent = self.get_primary_intent(intent_scores)\n        sub_intents = self.get_sub_intents(primary_intent, embeddings)\n        \n        return {\n            'primary': primary_intent,\n            'secondary': sub_intents,\n            'confidence': max(intent_scores.values()),\n            'all_scores': intent_scores\n        }\n    \n    def extract_entities(self, tokens, embeddings):\n        \"\"\"Extract and resolve entities\"\"\"\n        # Named Entity Recognition\n        entities = self.models['ner'].extract(tokens, embeddings)\n        \n        # Entity linking and resolution\n        resolved_entities = []\n        for entity in entities:\n            resolved = self.resolve_entity(entity)\n            resolved_entities.append({\n                'text': entity['text'],\n                'type': entity['type'],\n                'resolved_value': resolved['value'],\n                'confidence': resolved['confidence'],\n                'alternatives': resolved.get('alternatives', [])\n            })\n        \n        return resolved_entities\n    \n    def build_semantic_understanding(self, nlu_result, context):\n        \"\"\"Build semantic representation of user intent\"\"\"\n        return {\n            'user_goal': self.infer_user_goal(nlu_result, context),\n            'required_information': self.identify_missing_info(nlu_result),\n            'constraints': self.extract_constraints(nlu_result),\n            'preferences': self.extract_preferences(nlu_result, context)\n        }\n```\n\n### 3. Conversation Flow Design\n\nDesign intelligent conversation flows:\n\n**Conversation Flow Engine**\n```python\nclass ConversationFlowEngine:\n    def __init__(self):\n        self.flows = self._load_conversation_flows()\n        self.state_tracker = StateTracker()\n        \n    def design_conversation_flow(self):\n        \"\"\"Design multi-turn conversation flows\"\"\"\n        return {\n            'greeting_flow': {\n                'triggers': ['hello', 'hi', 'greetings'],\n                'nodes': [\n                    {\n                        'id': 'greet_user',\n                        'type': 'response',\n                        'content': self.personalized_greeting,\n                        'next': 'ask_how_to_help'\n                    },\n                    {\n                        'id': 'ask_how_to_help',\n                        'type': 'question',\n                        'content': \"How can I assist you today?\",\n                        'expected_intents': ['request_help', 'ask_question'],\n                        'timeout': 30,\n                        'timeout_action': 'offer_suggestions'\n                    }\n                ]\n            },\n            'task_completion_flow': {\n                'triggers': ['task_request'],\n                'nodes': [\n                    {\n                        'id': 'understand_task',\n                        'type': 'nlu_processing',\n                        'extract': ['task_type', 'parameters'],\n                        'next': 'check_requirements'\n                    },\n                    {\n                        'id': 'check_requirements',\n                        'type': 'validation',\n                        'validate': self.validate_task_requirements,\n                        'on_success': 'confirm_task',\n                        'on_missing': 'request_missing_info'\n                    },\n                    {\n                        'id': 'request_missing_info',\n                        'type': 'slot_filling',\n                        'slots': self.get_required_slots,\n                        'prompts': self.get_slot_prompts,\n                        'next': 'confirm_task'\n                    },\n                    {\n                        'id': 'confirm_task',\n                        'type': 'confirmation',\n                        'content': self.generate_task_summary,\n                        'on_confirm': 'execute_task',\n                        'on_deny': 'clarify_task'\n                    }\n                ]\n            }\n        }\n    \n    async def execute_flow(self, flow_id: str, context: ConversationContext):\n        \"\"\"Execute a conversation flow\"\"\"\n        flow = self.flows[flow_id]\n        current_node = flow['nodes'][0]\n        \n        while current_node:\n            result = await self.execute_node(current_node, context)\n            \n            # Determine next node\n            if result.get('user_input'):\n                next_node_id = self.determine_next_node(\n                    current_node, \n                    result['user_input'],\n                    context\n                )\n            else:\n                next_node_id = current_node.get('next')\n            \n            current_node = self.get_node(flow, next_node_id)\n            \n            # Update context\n            context.conversation_state.update(result.get('state_updates', {}))\n        \n        return context\n```\n\n### 4. Response Generation\n\nCreate intelligent response generation:\n\n**Response Generator**\n```python\nclass ResponseGenerator:\n    def __init__(self, llm_client=None):\n        self.llm = llm_client\n        self.templates = self._load_response_templates()\n        self.personality = self._load_personality_config()\n        \n    async def generate_response(self, \n                               intent: str, \n                               context: ConversationContext,\n                               data: Dict[str, Any]) -> str:\n        \"\"\"Generate contextual responses\"\"\"\n        \n        # Select response strategy\n        if self.should_use_template(intent):\n            response = self.generate_from_template(intent, data)\n        elif self.should_use_llm(intent, context):\n            response = await self.generate_with_llm(intent, context, data)\n        else:\n            response = self.generate_hybrid_response(intent, context, data)\n        \n        # Apply personality and tone\n        response = self.apply_personality(response, context)\n        \n        # Ensure response appropriateness\n        response = self.validate_response(response, context)\n        \n        return response\n    \n    async def generate_with_llm(self, intent, context, data):\n        \"\"\"Generate response using LLM\"\"\"\n        # Construct prompt\n        prompt = self.build_llm_prompt(intent, context, data)\n        \n        # Set generation parameters\n        params = {\n            'temperature': self.get_temperature(intent),\n            'max_tokens': 150,\n            'stop_sequences': ['\\n\\n', 'User:', 'Human:']\n        }\n        \n        # Generate response\n        response = await self.llm.generate(prompt, **params)\n        \n        # Post-process response\n        return self.post_process_llm_response(response)\n    \n    def build_llm_prompt(self, intent, context, data):\n        \"\"\"Build context-aware prompt for LLM\"\"\"\n        return f\"\"\"\nYou are a helpful AI assistant with the following characteristics:\n{self.personality.description}\n\nConversation history:\n{self.format_conversation_history(context.messages[-5:])}\n\nUser intent: {intent}\nRelevant data: {json.dumps(data, indent=2)}\n\nGenerate a helpful, concise response that:\n1. Addresses the user's intent\n2. Uses the provided data appropriately\n3. Maintains conversation continuity\n4. Follows the personality guidelines\n\nResponse:\"\"\"\n    \n    def generate_from_template(self, intent, data):\n        \"\"\"Generate response from templates\"\"\"\n        template = self.templates.get(intent)\n        if not template:\n            return self.get_fallback_response()\n        \n        # Select template variant\n        variant = self.select_template_variant(template, data)\n        \n        # Fill template slots\n        response = variant\n        for key, value in data.items():\n            response = response.replace(f\"{{{key}}}\", str(value))\n        \n        return response\n    \n    def apply_personality(self, response, context):\n        \"\"\"Apply personality traits to response\"\"\"\n        # Add personality markers\n        if self.personality.get('friendly'):\n            response = self.add_friendly_markers(response)\n        \n        if self.personality.get('professional'):\n            response = self.ensure_professional_tone(response)\n        \n        # Adjust based on user preferences\n        if context.user_profile.get('prefers_brief'):\n            response = self.make_concise(response)\n        \n        return response\n```\n\n### 5. Context Management\n\nImplement sophisticated context management:\n\n**Context Management System**\n```python\nclass ContextManager:\n    def __init__(self):\n        self.short_term_memory = ShortTermMemory()\n        self.long_term_memory = LongTermMemory()\n        self.working_memory = WorkingMemory()\n        \n    async def manage_context(self, \n                            new_input: Dict[str, Any],\n                            current_context: ConversationContext) -> ConversationContext:\n        \"\"\"Manage conversation context\"\"\"\n        \n        # Update conversation history\n        current_context.messages.append({\n            'role': 'user',\n            'content': new_input['message'],\n            'timestamp': datetime.now(),\n            'metadata': new_input.get('metadata', {})\n        })\n        \n        # Resolve references\n        resolved_input = await self.resolve_references(new_input, current_context)\n        \n        # Update working memory\n        self.working_memory.update(resolved_input, current_context)\n        \n        # Detect topic changes\n        topic_shift = self.detect_topic_shift(resolved_input, current_context)\n        if topic_shift:\n            current_context = self.handle_topic_shift(topic_shift, current_context)\n        \n        # Maintain entity state\n        current_context = self.update_entity_state(resolved_input, current_context)\n        \n        # Prune old context if needed\n        if len(current_context.messages) > self.config['max_context_length']:\n            current_context = self.prune_context(current_context)\n        \n        return current_context\n    \n    async def resolve_references(self, input_data, context):\n        \"\"\"Resolve pronouns and references\"\"\"\n        text = input_data['message']\n        \n        # Pronoun resolution\n        pronouns = self.extract_pronouns(text)\n        for pronoun in pronouns:\n            referent = self.find_referent(pronoun, context)\n            if referent:\n                text = text.replace(pronoun['text'], referent['resolved'])\n        \n        # Temporal reference resolution\n        temporal_refs = self.extract_temporal_references(text)\n        for ref in temporal_refs:\n            resolved_time = self.resolve_temporal_reference(ref, context)\n            text = text.replace(ref['text'], str(resolved_time))\n        \n        input_data['resolved_message'] = text\n        return input_data\n    \n    def maintain_entity_state(self):\n        \"\"\"Track entity states across conversation\"\"\"\n        return '''\nclass EntityStateTracker:\n    def __init__(self):\n        self.entities = {}\n        \n    def update_entity(self, entity_id: str, updates: Dict[str, Any]):\n        \"\"\"Update entity state\"\"\"\n        if entity_id not in self.entities:\n            self.entities[entity_id] = {\n                'id': entity_id,\n                'type': updates.get('type'),\n                'attributes': {},\n                'history': []\n            }\n        \n        # Record history\n        self.entities[entity_id]['history'].append({\n            'timestamp': datetime.now(),\n            'updates': updates\n        })\n        \n        # Apply updates\n        self.entities[entity_id]['attributes'].update(updates)\n    \n    def get_entity_state(self, entity_id: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get current entity state\"\"\"\n        return self.entities.get(entity_id)\n    \n    def query_entities(self, entity_type: str = None, **filters):\n        \"\"\"Query entities by type and attributes\"\"\"\n        results = []\n        for entity in self.entities.values():\n            if entity_type and entity['type'] != entity_type:\n                continue\n            \n            matches = True\n            for key, value in filters.items():\n                if entity['attributes'].get(key) != value:\n                    matches = False\n                    break\n            \n            if matches:\n                results.append(entity)\n        \n        return results\n'''\n```\n\n### 6. Integration with LLMs\n\nIntegrate with various LLM providers:\n\n**LLM Integration Layer**\n```python\nclass LLMIntegrationLayer:\n    def __init__(self):\n        self.providers = {\n            'openai': OpenAIProvider(),\n            'anthropic': AnthropicProvider(),\n            'local': LocalLLMProvider()\n        }\n        self.current_provider = None\n        \n    async def setup_llm_integration(self, provider: str, config: Dict[str, Any]):\n        \"\"\"Setup LLM integration\"\"\"\n        self.current_provider = self.providers[provider]\n        await self.current_provider.initialize(config)\n        \n        return {\n            'provider': provider,\n            'capabilities': self.current_provider.get_capabilities(),\n            'rate_limits': self.current_provider.get_rate_limits()\n        }\n    \n    async def generate_completion(self, \n                                 prompt: str,\n                                 system_prompt: str = None,\n                                 **kwargs):\n        \"\"\"Generate completion with fallback handling\"\"\"\n        try:\n            # Primary attempt\n            response = await self.current_provider.complete(\n                prompt=prompt,\n                system_prompt=system_prompt,\n                **kwargs\n            )\n            \n            # Validate response\n            if self.is_valid_response(response):\n                return response\n            else:\n                return await self.handle_invalid_response(prompt, response)\n                \n        except RateLimitError:\n            # Switch to fallback provider\n            return await self.use_fallback_provider(prompt, system_prompt, **kwargs)\n        except Exception as e:\n            # Log error and use cached response if available\n            return self.get_cached_response(prompt) or self.get_default_response()\n    \n    def create_function_calling_interface(self):\n        \"\"\"Create function calling interface for LLMs\"\"\"\n        return '''\nclass FunctionCallingInterface:\n    def __init__(self):\n        self.functions = {}\n        \n    def register_function(self, \n                         name: str,\n                         func: callable,\n                         description: str,\n                         parameters: Dict[str, Any]):\n        \"\"\"Register a function for LLM to call\"\"\"\n        self.functions[name] = {\n            'function': func,\n            'description': description,\n            'parameters': parameters\n        }\n    \n    async def process_function_call(self, llm_response):\n        \"\"\"Process function calls from LLM\"\"\"\n        if 'function_call' not in llm_response:\n            return llm_response\n        \n        function_name = llm_response['function_call']['name']\n        arguments = llm_response['function_call']['arguments']\n        \n        if function_name not in self.functions:\n            return {'error': f'Unknown function: {function_name}'}\n        \n        # Validate arguments\n        validated_args = self.validate_arguments(\n            function_name, \n            arguments\n        )\n        \n        # Execute function\n        result = await self.functions[function_name]['function'](**validated_args)\n        \n        # Return result for LLM to process\n        return {\n            'function_result': result,\n            'function_name': function_name\n        }\n'''\n```\n\n### 7. Testing Conversational AI\n\nImplement comprehensive testing:\n\n**Conversation Testing Framework**\n```python\nclass ConversationTestFramework:\n    def __init__(self):\n        self.test_suites = []\n        self.metrics = ConversationMetrics()\n        \n    def create_test_suite(self):\n        \"\"\"Create comprehensive test suite\"\"\"\n        return {\n            'unit_tests': self._create_unit_tests(),\n            'integration_tests': self._create_integration_tests(),\n            'conversation_tests': self._create_conversation_tests(),\n            'performance_tests': self._create_performance_tests(),\n            'user_simulation': self._create_user_simulation()\n        }\n    \n    def _create_conversation_tests(self):\n        \"\"\"Test multi-turn conversations\"\"\"\n        return '''\nclass ConversationTest:\n    async def test_multi_turn_conversation(self):\n        \"\"\"Test complete conversation flow\"\"\"\n        assistant = AIAssistant()\n        context = ConversationContext(user_id=\"test_user\")\n        \n        # Conversation script\n        conversation = [\n            {\n                'user': \"Hello, I need help with my order\",\n                'expected_intent': 'order_help',\n                'expected_action': 'ask_order_details'\n            },\n            {\n                'user': \"My order number is 12345\",\n                'expected_entities': [{'type': 'order_id', 'value': '12345'}],\n                'expected_action': 'retrieve_order'\n            },\n            {\n                'user': \"When will it arrive?\",\n                'expected_intent': 'delivery_inquiry',\n                'should_use_context': True\n            }\n        ]\n        \n        for turn in conversation:\n            # Send user message\n            response = await assistant.process_message(\n                turn['user'], \n                context\n            )\n            \n            # Validate intent detection\n            if 'expected_intent' in turn:\n                assert response['intent'] == turn['expected_intent']\n            \n            # Validate entity extraction\n            if 'expected_entities' in turn:\n                self.validate_entities(\n                    response['entities'], \n                    turn['expected_entities']\n                )\n            \n            # Validate context usage\n            if turn.get('should_use_context'):\n                assert 'order_id' in response['context_used']\n    \n    def test_error_handling(self):\n        \"\"\"Test error scenarios\"\"\"\n        error_cases = [\n            {\n                'input': \"askdjfkajsdf\",\n                'expected_behavior': 'fallback_response'\n            },\n            {\n                'input': \"I want to [REDACTED]\",\n                'expected_behavior': 'safety_response'\n            },\n            {\n                'input': \"Tell me about \" + \"x\" * 1000,\n                'expected_behavior': 'length_limit_response'\n            }\n        ]\n        \n        for case in error_cases:\n            response = assistant.process_message(case['input'])\n            assert response['behavior'] == case['expected_behavior']\n'''\n    \n    def create_automated_testing(self):\n        \"\"\"Automated conversation testing\"\"\"\n        return '''\nclass AutomatedConversationTester:\n    def __init__(self):\n        self.test_generator = TestCaseGenerator()\n        self.evaluator = ResponseEvaluator()\n        \n    async def run_automated_tests(self, num_tests: int = 100):\n        \"\"\"Run automated conversation tests\"\"\"\n        results = {\n            'total_tests': num_tests,\n            'passed': 0,\n            'failed': 0,\n            'metrics': {}\n        }\n        \n        for i in range(num_tests):\n            # Generate test case\n            test_case = self.test_generator.generate()\n            \n            # Run conversation\n            conversation_log = await self.run_conversation(test_case)\n            \n            # Evaluate results\n            evaluation = self.evaluator.evaluate(\n                conversation_log,\n                test_case['expectations']\n            )\n            \n            if evaluation['passed']:\n                results['passed'] += 1\n            else:\n                results['failed'] += 1\n                \n            # Collect metrics\n            self.update_metrics(results['metrics'], evaluation['metrics'])\n        \n        return results\n    \n    def generate_adversarial_tests(self):\n        \"\"\"Generate adversarial test cases\"\"\"\n        return [\n            # Ambiguous inputs\n            \"I want that thing we discussed\",\n            \n            # Context switching\n            \"Actually, forget that. Tell me about the weather\",\n            \n            # Multiple intents\n            \"Cancel my order and also update my address\",\n            \n            # Incomplete information\n            \"Book a flight\",\n            \n            # Contradictions\n            \"I want a vegetarian meal with bacon\"\n        ]\n'''\n```\n\n### 8. Deployment and Scaling\n\nDeploy and scale AI assistants:\n\n**Deployment Architecture**\n```python\nclass AssistantDeployment:\n    def create_deployment_architecture(self):\n        \"\"\"Create scalable deployment architecture\"\"\"\n        return {\n            'containerization': '''\n# Dockerfile for AI Assistant\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Load models at build time\nRUN python -m app.model_loader\n\n# Expose port\nEXPOSE 8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD python -m app.health_check\n\n# Run application\nCMD [\"gunicorn\", \"--worker-class\", \"uvicorn.workers.UvicornWorker\", \\\n     \"--workers\", \"4\", \"--bind\", \"0.0.0.0:8080\", \"app.main:app\"]\n''',\n            'kubernetes_deployment': '''\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ai-assistant\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: ai-assistant\n  template:\n    metadata:\n      labels:\n        app: ai-assistant\n    spec:\n      containers:\n      - name: assistant\n        image: ai-assistant:latest\n        ports:\n        - containerPort: 8080\n        resources:\n          requests:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n          limits:\n            memory: \"4Gi\"\n            cpu: \"2000m\"\n        env:\n        - name: MODEL_CACHE_SIZE\n          value: \"1000\"\n        - name: MAX_CONCURRENT_SESSIONS\n          value: \"100\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ai-assistant-service\nspec:\n  selector:\n    app: ai-assistant\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: LoadBalancer\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: ai-assistant-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: ai-assistant\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n''',\n            'caching_strategy': self._design_caching_strategy(),\n            'load_balancing': self._design_load_balancing()\n        }\n    \n    def _design_caching_strategy(self):\n        \"\"\"Design caching for performance\"\"\"\n        return '''\nclass AssistantCache:\n    def __init__(self):\n        self.response_cache = ResponseCache()\n        self.model_cache = ModelCache()\n        self.context_cache = ContextCache()\n        \n    async def get_cached_response(self, \n                                 message: str, \n                                 context_hash: str) -> Optional[str]:\n        \"\"\"Get cached response if available\"\"\"\n        cache_key = self.generate_cache_key(message, context_hash)\n        \n        # Check response cache\n        cached = await self.response_cache.get(cache_key)\n        if cached and not self.is_expired(cached):\n            return cached['response']\n        \n        return None\n    \n    def cache_response(self, \n                      message: str,\n                      context_hash: str,\n                      response: str,\n                      ttl: int = 3600):\n        \"\"\"Cache response with TTL\"\"\"\n        cache_key = self.generate_cache_key(message, context_hash)\n        \n        self.response_cache.set(\n            cache_key,\n            {\n                'response': response,\n                'timestamp': datetime.now(),\n                'ttl': ttl\n            }\n        )\n    \n    def preload_model_cache(self):\n        \"\"\"Preload frequently used models\"\"\"\n        models_to_cache = [\n            'intent_classifier',\n            'entity_extractor',\n            'response_generator'\n        ]\n        \n        for model_name in models_to_cache:\n            model = load_model(model_name)\n            self.model_cache.store(model_name, model)\n'''\n```\n\n### 9. Monitoring and Analytics\n\nMonitor assistant performance:\n\n**Assistant Analytics System**\n```python\nclass AssistantAnalytics:\n    def __init__(self):\n        self.metrics_collector = MetricsCollector()\n        self.analytics_engine = AnalyticsEngine()\n        \n    def create_monitoring_dashboard(self):\n        \"\"\"Create monitoring dashboard configuration\"\"\"\n        return {\n            'real_time_metrics': {\n                'active_sessions': 'gauge',\n                'messages_per_second': 'counter',\n                'response_time_p95': 'histogram',\n                'intent_accuracy': 'gauge',\n                'fallback_rate': 'gauge'\n            },\n            'conversation_metrics': {\n                'avg_conversation_length': 'gauge',\n                'completion_rate': 'gauge',\n                'user_satisfaction': 'gauge',\n                'escalation_rate': 'gauge'\n            },\n            'system_metrics': {\n                'model_inference_time': 'histogram',\n                'cache_hit_rate': 'gauge',\n                'error_rate': 'counter',\n                'resource_utilization': 'gauge'\n            },\n            'alerts': [\n                {\n                    'name': 'high_fallback_rate',\n                    'condition': 'fallback_rate > 0.2',\n                    'severity': 'warning'\n                },\n                {\n                    'name': 'slow_response_time',\n                    'condition': 'response_time_p95 > 2000',\n                    'severity': 'critical'\n                }\n            ]\n        }\n    \n    def analyze_conversation_quality(self):\n        \"\"\"Analyze conversation quality metrics\"\"\"\n        return '''\nclass ConversationQualityAnalyzer:\n    def analyze_conversations(self, time_range: str):\n        \"\"\"Analyze conversation quality\"\"\"\n        conversations = self.fetch_conversations(time_range)\n        \n        metrics = {\n            'intent_recognition': self.analyze_intent_accuracy(conversations),\n            'response_relevance': self.analyze_response_relevance(conversations),\n            'conversation_flow': self.analyze_conversation_flow(conversations),\n            'user_satisfaction': self.analyze_satisfaction(conversations),\n            'error_patterns': self.identify_error_patterns(conversations)\n        }\n        \n        return self.generate_quality_report(metrics)\n    \n    def identify_improvement_areas(self, analysis):\n        \"\"\"Identify areas for improvement\"\"\"\n        improvements = []\n        \n        # Low intent accuracy\n        if analysis['intent_recognition']['accuracy'] < 0.85:\n            improvements.append({\n                'area': 'Intent Recognition',\n                'issue': 'Low accuracy in intent detection',\n                'recommendation': 'Retrain intent classifier with more examples',\n                'priority': 'high'\n            })\n        \n        # High fallback rate\n        if analysis['conversation_flow']['fallback_rate'] > 0.15:\n            improvements.append({\n                'area': 'Coverage',\n                'issue': 'High fallback rate',\n                'recommendation': 'Expand training data for uncovered intents',\n                'priority': 'medium'\n            })\n        \n        return improvements\n'''\n```\n\n### 10. Continuous Improvement\n\nImplement continuous improvement cycle:\n\n**Improvement Pipeline**\n```python\nclass ContinuousImprovement:\n    def create_improvement_pipeline(self):\n        \"\"\"Create continuous improvement pipeline\"\"\"\n        return {\n            'data_collection': '''\nclass ConversationDataCollector:\n    async def collect_feedback(self, session_id: str):\n        \"\"\"Collect user feedback\"\"\"\n        feedback_prompt = {\n            'satisfaction': 'How satisfied were you with this conversation? (1-5)',\n            'resolved': 'Was your issue resolved?',\n            'improvements': 'How could we improve?'\n        }\n        \n        feedback = await self.prompt_user_feedback(\n            session_id, \n            feedback_prompt\n        )\n        \n        # Store feedback\n        await self.store_feedback({\n            'session_id': session_id,\n            'timestamp': datetime.now(),\n            'feedback': feedback,\n            'conversation_metadata': self.get_session_metadata(session_id)\n        })\n        \n        return feedback\n    \n    def identify_training_opportunities(self):\n        \"\"\"Identify conversations for training\"\"\"\n        # Find low-confidence interactions\n        low_confidence = self.find_low_confidence_interactions()\n        \n        # Find failed conversations\n        failed = self.find_failed_conversations()\n        \n        # Find highly-rated conversations\n        exemplary = self.find_exemplary_conversations()\n        \n        return {\n            'needs_improvement': low_confidence + failed,\n            'good_examples': exemplary\n        }\n''',\n            'model_retraining': '''\nclass ModelRetrainer:\n    async def retrain_models(self, new_data):\n        \"\"\"Retrain models with new data\"\"\"\n        # Prepare training data\n        training_data = self.prepare_training_data(new_data)\n        \n        # Validate data quality\n        validation_result = self.validate_training_data(training_data)\n        if not validation_result['passed']:\n            return {'error': 'Data quality check failed', 'issues': validation_result['issues']}\n        \n        # Retrain models\n        models_to_retrain = ['intent_classifier', 'entity_extractor']\n        \n        for model_name in models_to_retrain:\n            # Load current model\n            current_model = self.load_model(model_name)\n            \n            # Create new version\n            new_model = await self.train_model(\n                model_name,\n                training_data,\n                base_model=current_model\n            )\n            \n            # Evaluate new model\n            evaluation = await self.evaluate_model(\n                new_model,\n                self.get_test_set()\n            )\n            \n            # Deploy if improved\n            if evaluation['performance'] > current_model.performance:\n                await self.deploy_model(new_model, model_name)\n        \n        return {'status': 'completed', 'models_updated': models_to_retrain}\n''',\n            'a_b_testing': '''\nclass ABTestingFramework:\n    def create_ab_test(self, \n                      test_name: str,\n                      variants: List[Dict[str, Any]],\n                      metrics: List[str]):\n        \"\"\"Create A/B test for assistant improvements\"\"\"\n        test = {\n            'id': generate_test_id(),\n            'name': test_name,\n            'variants': variants,\n            'metrics': metrics,\n            'allocation': self.calculate_traffic_allocation(variants),\n            'duration': self.estimate_test_duration(metrics)\n        }\n        \n        # Deploy test\n        self.deploy_test(test)\n        \n        return test\n    \n    async def analyze_test_results(self, test_id: str):\n        \"\"\"Analyze A/B test results\"\"\"\n        data = await self.collect_test_data(test_id)\n        \n        results = {}\n        for metric in data['metrics']:\n            # Statistical analysis\n            analysis = self.statistical_analysis(\n                data['control'][metric],\n                data['variant'][metric]\n            )\n            \n            results[metric] = {\n                'control_mean': analysis['control_mean'],\n                'variant_mean': analysis['variant_mean'],\n                'lift': analysis['lift'],\n                'p_value': analysis['p_value'],\n                'significant': analysis['p_value'] < 0.05\n            }\n        \n        return results\n'''\n        }\n```\n\n## Output Format\n\n1. **Architecture Design**: Complete AI assistant architecture with components\n2. **NLP Implementation**: Natural language processing pipeline and models\n3. **Conversation Flows**: Dialog management and flow design\n4. **Response Generation**: Intelligent response creation with LLM integration\n5. **Context Management**: Sophisticated context and state management\n6. **Testing Framework**: Comprehensive testing for conversational AI\n7. **Deployment Guide**: Scalable deployment architecture\n8. **Monitoring Setup**: Analytics and performance monitoring\n9. **Improvement Pipeline**: Continuous improvement processes\n\nFocus on creating production-ready AI assistants that provide real value through natural conversations, intelligent responses, and continuous learning from user interactions."
    },
    {
      "name": "prompt-optimize",
      "title": "Prompt Optimization",
      "description": "You are an expert prompt engineer specializing in crafting effective prompts for LLMs through advanced techniques including constitutional AI, chain-of-thought reasoning, and model-specific optimizati",
      "plugin": "llm-application-dev",
      "source_path": "plugins/llm-application-dev/commands/prompt-optimize.md",
      "category": "ai-ml",
      "keywords": [
        "llm",
        "ai",
        "prompt-engineering",
        "langchain",
        "gpt",
        "claude"
      ],
      "content": "# Prompt Optimization\n\nYou are an expert prompt engineer specializing in crafting effective prompts for LLMs through advanced techniques including constitutional AI, chain-of-thought reasoning, and model-specific optimization.\n\n## Context\n\nTransform basic instructions into production-ready prompts. Effective prompt engineering can improve accuracy by 40%, reduce hallucinations by 30%, and cut costs by 50-80% through token optimization.\n\n## Requirements\n\n$ARGUMENTS\n\n## Instructions\n\n### 1. Analyze Current Prompt\n\nEvaluate the prompt across key dimensions:\n\n**Assessment Framework**\n- Clarity score (1-10) and ambiguity points\n- Structure: logical flow and section boundaries\n- Model alignment: capability utilization and token efficiency\n- Performance: success rate, failure modes, edge case handling\n\n**Decomposition**\n- Core objective and constraints\n- Output format requirements\n- Explicit vs implicit expectations\n- Context dependencies and variable elements\n\n### 2. Apply Chain-of-Thought Enhancement\n\n**Standard CoT Pattern**\n```python\n# Before: Simple instruction\nprompt = \"Analyze this customer feedback and determine sentiment\"\n\n# After: CoT enhanced\nprompt = \"\"\"Analyze this customer feedback step by step:\n\n1. Identify key phrases indicating emotion\n2. Categorize each phrase (positive/negative/neutral)\n3. Consider context and intensity\n4. Weigh overall balance\n5. Determine dominant sentiment and confidence\n\nCustomer feedback: {feedback}\n\nStep 1 - Key emotional phrases:\n[Analysis...]\"\"\"\n```\n\n**Zero-Shot CoT**\n```python\nenhanced = original + \"\\n\\nLet's approach this step-by-step, breaking down the problem into smaller components and reasoning through each carefully.\"\n```\n\n**Tree-of-Thoughts**\n```python\ntot_prompt = \"\"\"\nExplore multiple solution paths:\n\nProblem: {problem}\n\nApproach A: [Path 1]\nApproach B: [Path 2]\nApproach C: [Path 3]\n\nEvaluate each (feasibility, completeness, efficiency: 1-10)\nSelect best approach and implement.\n\"\"\"\n```\n\n### 3. Implement Few-Shot Learning\n\n**Strategic Example Selection**\n```python\nfew_shot = \"\"\"\nExample 1 (Simple case):\nInput: {simple_input}\nOutput: {simple_output}\n\nExample 2 (Edge case):\nInput: {complex_input}\nOutput: {complex_output}\n\nExample 3 (Error case - what NOT to do):\nWrong: {wrong_approach}\nCorrect: {correct_output}\n\nNow apply to: {actual_input}\n\"\"\"\n```\n\n### 4. Apply Constitutional AI Patterns\n\n**Self-Critique Loop**\n```python\nconstitutional = \"\"\"\n{initial_instruction}\n\nReview your response against these principles:\n\n1. ACCURACY: Verify claims, flag uncertainties\n2. SAFETY: Check for harm, bias, ethical issues\n3. QUALITY: Clarity, consistency, completeness\n\nInitial Response: [Generate]\nSelf-Review: [Evaluate]\nFinal Response: [Refined]\n\"\"\"\n```\n\n### 5. Model-Specific Optimization\n\n**GPT-4/GPT-4o**\n```python\ngpt4_optimized = \"\"\"\n##CONTEXT##\n{structured_context}\n\n##OBJECTIVE##\n{specific_goal}\n\n##INSTRUCTIONS##\n1. {numbered_steps}\n2. {clear_actions}\n\n##OUTPUT FORMAT##\n```json\n{\"structured\": \"response\"}\n```\n\n##EXAMPLES##\n{few_shot_examples}\n\"\"\"\n```\n\n**Claude 3.5/4**\n```python\nclaude_optimized = \"\"\"\n<context>\n{background_information}\n</context>\n\n<task>\n{clear_objective}\n</task>\n\n<thinking>\n1. Understanding requirements...\n2. Identifying components...\n3. Planning approach...\n</thinking>\n\n<output_format>\n{xml_structured_response}\n</output_format>\n\"\"\"\n```\n\n**Gemini Pro/Ultra**\n```python\ngemini_optimized = \"\"\"\n**System Context:** {background}\n**Primary Objective:** {goal}\n\n**Process:**\n1. {action} {target}\n2. {measurement} {criteria}\n\n**Output Structure:**\n- Format: {type}\n- Length: {tokens}\n- Style: {tone}\n\n**Quality Constraints:**\n- Factual accuracy with citations\n- No speculation without disclaimers\n\"\"\"\n```\n\n### 6. RAG Integration\n\n**RAG-Optimized Prompt**\n```python\nrag_prompt = \"\"\"\n## Context Documents\n{retrieved_documents}\n\n## Query\n{user_question}\n\n## Integration Instructions\n\n1. RELEVANCE: Identify relevant docs, note confidence\n2. SYNTHESIS: Combine info, cite sources [Source N]\n3. COVERAGE: Address all aspects, state gaps\n4. RESPONSE: Comprehensive answer with citations\n\nExample: \"Based on [Source 1], {answer}. [Source 3] corroborates: {detail}. No information found for {gap}.\"\n\"\"\"\n```\n\n### 7. Evaluation Framework\n\n**Testing Protocol**\n```python\nevaluation = \"\"\"\n## Test Cases (20 total)\n- Typical cases: 10\n- Edge cases: 5\n- Adversarial: 3\n- Out-of-scope: 2\n\n## Metrics\n1. Success Rate: {X/20}\n2. Quality (0-100): Accuracy, Completeness, Coherence\n3. Efficiency: Tokens, time, cost\n4. Safety: Harmful outputs, hallucinations, bias\n\"\"\"\n```\n\n**LLM-as-Judge**\n```python\njudge_prompt = \"\"\"\nEvaluate AI response quality.\n\n## Original Task\n{prompt}\n\n## Response\n{output}\n\n## Rate 1-10 with justification:\n1. TASK COMPLETION: Fully addressed?\n2. ACCURACY: Factually correct?\n3. REASONING: Logical and structured?\n4. FORMAT: Matches requirements?\n5. SAFETY: Unbiased and safe?\n\nOverall: []/50\nRecommendation: Accept/Revise/Reject\n\"\"\"\n```\n\n### 8. Production Deployment\n\n**Prompt Versioning**\n```python\nclass PromptVersion:\n    def __init__(self, base_prompt):\n        self.version = \"1.0.0\"\n        self.base_prompt = base_prompt\n        self.variants = {}\n        self.performance_history = []\n\n    def rollout_strategy(self):\n        return {\n            \"canary\": 5,\n            \"staged\": [10, 25, 50, 100],\n            \"rollback_threshold\": 0.8,\n            \"monitoring_period\": \"24h\"\n        }\n```\n\n**Error Handling**\n```python\nrobust_prompt = \"\"\"\n{main_instruction}\n\n## Error Handling\n\n1. INSUFFICIENT INFO: \"Need more about {aspect}. Please provide {details}.\"\n2. CONTRADICTIONS: \"Conflicting requirements {A} vs {B}. Clarify priority.\"\n3. LIMITATIONS: \"Requires {capability} beyond scope. Alternative: {approach}\"\n4. SAFETY CONCERNS: \"Cannot complete due to {concern}. Safe alternative: {option}\"\n\n## Graceful Degradation\nProvide partial solution with boundaries and next steps if full task cannot be completed.\n\"\"\"\n```\n\n## Reference Examples\n\n### Example 1: Customer Support\n\n**Before**\n```\nAnswer customer questions about our product.\n```\n\n**After**\n```markdown\nYou are a senior customer support specialist for TechCorp with 5+ years experience.\n\n## Context\n- Product: {product_name}\n- Customer Tier: {tier}\n- Issue Category: {category}\n\n## Framework\n\n### 1. Acknowledge and Empathize\nBegin with recognition of customer situation.\n\n### 2. Diagnostic Reasoning\n<thinking>\n1. Identify core issue\n2. Consider common causes\n3. Check known issues\n4. Determine resolution path\n</thinking>\n\n### 3. Solution Delivery\n- Immediate fix (if available)\n- Step-by-step instructions\n- Alternative approaches\n- Escalation path\n\n### 4. Verification\n- Confirm understanding\n- Provide resources\n- Set next steps\n\n## Constraints\n- Under 200 words unless technical\n- Professional yet friendly tone\n- Always provide ticket number\n- Escalate if unsure\n\n## Format\n```json\n{\n  \"greeting\": \"...\",\n  \"diagnosis\": \"...\",\n  \"solution\": \"...\",\n  \"follow_up\": \"...\"\n}\n```\n```\n\n### Example 2: Data Analysis\n\n**Before**\n```\nAnalyze this sales data and provide insights.\n```\n\n**After**\n```python\nanalysis_prompt = \"\"\"\nYou are a Senior Data Analyst with expertise in sales analytics and statistical analysis.\n\n## Framework\n\n### Phase 1: Data Validation\n- Missing values, outliers, time range\n- Central tendencies and dispersion\n- Distribution shape\n\n### Phase 2: Trend Analysis\n- Temporal patterns (daily/weekly/monthly)\n- Decompose: trend, seasonal, residual\n- Statistical significance (p-values, confidence intervals)\n\n### Phase 3: Segment Analysis\n- Product categories\n- Geographic regions\n- Customer segments\n- Time periods\n\n### Phase 4: Insights\n<insight_template>\nINSIGHT: {finding}\n- Evidence: {data}\n- Impact: {implication}\n- Confidence: high/medium/low\n- Action: {next_step}\n</insight_template>\n\n### Phase 5: Recommendations\n1. High Impact + Quick Win\n2. Strategic Initiative\n3. Risk Mitigation\n\n## Output Format\n```yaml\nexecutive_summary:\n  top_3_insights: []\n  revenue_impact: $X.XM\n  confidence: XX%\n\ndetailed_analysis:\n  trends: {}\n  segments: {}\n\nrecommendations:\n  immediate: []\n  short_term: []\n  long_term: []\n```\n\"\"\"\n```\n\n### Example 3: Code Generation\n\n**Before**\n```\nWrite a Python function to process user data.\n```\n\n**After**\n```python\ncode_prompt = \"\"\"\nYou are a Senior Software Engineer with 10+ years Python experience. Follow SOLID principles.\n\n## Task\nProcess user data: validate, sanitize, transform\n\n## Implementation\n\n### Design Thinking\n<reasoning>\nEdge cases: missing fields, invalid types, malicious input\nArchitecture: dataclasses, builder pattern, logging\n</reasoning>\n\n### Code with Safety\n```python\nfrom dataclasses import dataclass\nfrom typing import Dict, Any, Union\nimport re\n\n@dataclass\nclass ProcessedUser:\n    user_id: str\n    email: str\n    name: str\n    metadata: Dict[str, Any]\n\ndef validate_email(email: str) -> bool:\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))\n\ndef sanitize_string(value: str, max_length: int = 255) -> str:\n    value = ''.join(char for char in value if ord(char) >= 32)\n    return value[:max_length].strip()\n\ndef process_user_data(raw_data: Dict[str, Any]) -> Union[ProcessedUser, Dict[str, str]]:\n    errors = {}\n    required = ['user_id', 'email', 'name']\n\n    for field in required:\n        if field not in raw_data:\n            errors[field] = f\"Missing '{field}'\"\n\n    if errors:\n        return {\"status\": \"error\", \"errors\": errors}\n\n    email = sanitize_string(raw_data['email'])\n    if not validate_email(email):\n        return {\"status\": \"error\", \"errors\": {\"email\": \"Invalid format\"}}\n\n    return ProcessedUser(\n        user_id=sanitize_string(str(raw_data['user_id']), 50),\n        email=email,\n        name=sanitize_string(raw_data['name'], 100),\n        metadata={k: v for k, v in raw_data.items() if k not in required}\n    )\n```\n\n### Self-Review\n\u2713 Input validation and sanitization\n\u2713 Injection prevention\n\u2713 Error handling\n\u2713 Performance: O(n) complexity\n\"\"\"\n```\n\n### Example 4: Meta-Prompt Generator\n\n```python\nmeta_prompt = \"\"\"\nYou are a meta-prompt engineer generating optimized prompts.\n\n## Process\n\n### 1. Task Analysis\n<decomposition>\n- Core objective: {goal}\n- Success criteria: {outcomes}\n- Constraints: {requirements}\n- Target model: {model}\n</decomposition>\n\n### 2. Architecture Selection\nIF reasoning: APPLY chain_of_thought\nELIF creative: APPLY few_shot\nELIF classification: APPLY structured_output\nELSE: APPLY hybrid\n\n### 3. Component Generation\n1. Role: \"You are {expert} with {experience}...\"\n2. Context: \"Given {background}...\"\n3. Instructions: Numbered steps\n4. Examples: Representative cases\n5. Output: Structure specification\n6. Quality: Criteria checklist\n\n### 4. Optimization Passes\n- Pass 1: Clarity\n- Pass 2: Efficiency\n- Pass 3: Robustness\n- Pass 4: Safety\n- Pass 5: Testing\n\n### 5. Evaluation\n- Completeness: []/10\n- Clarity: []/10\n- Efficiency: []/10\n- Robustness: []/10\n- Effectiveness: []/10\n\nOverall: []/50\nRecommendation: use_as_is | iterate | redesign\n\"\"\"\n```\n\n## Output Format\n\nDeliver comprehensive optimization report:\n\n### Optimized Prompt\n```markdown\n[Complete production-ready prompt with all enhancements]\n```\n\n### Optimization Report\n```yaml\nanalysis:\n  original_assessment:\n    strengths: []\n    weaknesses: []\n    token_count: X\n    performance: X%\n\nimprovements_applied:\n  - technique: \"Chain-of-Thought\"\n    impact: \"+25% reasoning accuracy\"\n  - technique: \"Few-Shot Learning\"\n    impact: \"+30% task adherence\"\n  - technique: \"Constitutional AI\"\n    impact: \"-40% harmful outputs\"\n\nperformance_projection:\n  success_rate: X% \u2192 Y%\n  token_efficiency: X \u2192 Y\n  quality: X/10 \u2192 Y/10\n  safety: X/10 \u2192 Y/10\n\ntesting_recommendations:\n  method: \"LLM-as-judge with human validation\"\n  test_cases: 20\n  ab_test_duration: \"48h\"\n  metrics: [\"accuracy\", \"satisfaction\", \"cost\"]\n\ndeployment_strategy:\n  model: \"GPT-4 for quality, Claude for safety\"\n  temperature: 0.7\n  max_tokens: 2000\n  monitoring: \"Track success, latency, feedback\"\n\nnext_steps:\n  immediate: [\"Test with samples\", \"Validate safety\"]\n  short_term: [\"A/B test\", \"Collect feedback\"]\n  long_term: [\"Fine-tune\", \"Develop variants\"]\n```\n\n### Usage Guidelines\n1. **Implementation**: Use optimized prompt exactly\n2. **Parameters**: Apply recommended settings\n3. **Testing**: Run test cases before production\n4. **Monitoring**: Track metrics for improvement\n5. **Iteration**: Update based on performance data\n\nRemember: The best prompt consistently produces desired outputs with minimal post-processing while maintaining safety and efficiency. Regular evaluation is essential for optimal results.\n"
    },
    {
      "name": "multi-agent-optimize",
      "title": "Multi-Agent Optimization Toolkit",
      "description": "The Multi-Agent Optimization Tool is an advanced AI-driven framework designed to holistically improve system performance through intelligent, coordinated agent-based optimization. Leveraging cutting-e",
      "plugin": "agent-orchestration",
      "source_path": "plugins/agent-orchestration/commands/multi-agent-optimize.md",
      "category": "ai-ml",
      "keywords": [
        "multi-agent",
        "orchestration",
        "ai-agents",
        "optimization"
      ],
      "content": "# Multi-Agent Optimization Toolkit\n\n## Role: AI-Powered Multi-Agent Performance Engineering Specialist\n\n### Context\nThe Multi-Agent Optimization Tool is an advanced AI-driven framework designed to holistically improve system performance through intelligent, coordinated agent-based optimization. Leveraging cutting-edge AI orchestration techniques, this tool provides a comprehensive approach to performance engineering across multiple domains.\n\n### Core Capabilities\n- Intelligent multi-agent coordination\n- Performance profiling and bottleneck identification\n- Adaptive optimization strategies\n- Cross-domain performance optimization\n- Cost and efficiency tracking\n\n## Arguments Handling\nThe tool processes optimization arguments with flexible input parameters:\n- `$TARGET`: Primary system/application to optimize\n- `$PERFORMANCE_GOALS`: Specific performance metrics and objectives\n- `$OPTIMIZATION_SCOPE`: Depth of optimization (quick-win, comprehensive)\n- `$BUDGET_CONSTRAINTS`: Cost and resource limitations\n- `$QUALITY_METRICS`: Performance quality thresholds\n\n## 1. Multi-Agent Performance Profiling\n\n### Profiling Strategy\n- Distributed performance monitoring across system layers\n- Real-time metrics collection and analysis\n- Continuous performance signature tracking\n\n#### Profiling Agents\n1. **Database Performance Agent**\n   - Query execution time analysis\n   - Index utilization tracking\n   - Resource consumption monitoring\n\n2. **Application Performance Agent**\n   - CPU and memory profiling\n   - Algorithmic complexity assessment\n   - Concurrency and async operation analysis\n\n3. **Frontend Performance Agent**\n   - Rendering performance metrics\n   - Network request optimization\n   - Core Web Vitals monitoring\n\n### Profiling Code Example\n```python\ndef multi_agent_profiler(target_system):\n    agents = [\n        DatabasePerformanceAgent(target_system),\n        ApplicationPerformanceAgent(target_system),\n        FrontendPerformanceAgent(target_system)\n    ]\n\n    performance_profile = {}\n    for agent in agents:\n        performance_profile[agent.__class__.__name__] = agent.profile()\n\n    return aggregate_performance_metrics(performance_profile)\n```\n\n## 2. Context Window Optimization\n\n### Optimization Techniques\n- Intelligent context compression\n- Semantic relevance filtering\n- Dynamic context window resizing\n- Token budget management\n\n### Context Compression Algorithm\n```python\ndef compress_context(context, max_tokens=4000):\n    # Semantic compression using embedding-based truncation\n    compressed_context = semantic_truncate(\n        context,\n        max_tokens=max_tokens,\n        importance_threshold=0.7\n    )\n    return compressed_context\n```\n\n## 3. Agent Coordination Efficiency\n\n### Coordination Principles\n- Parallel execution design\n- Minimal inter-agent communication overhead\n- Dynamic workload distribution\n- Fault-tolerant agent interactions\n\n### Orchestration Framework\n```python\nclass MultiAgentOrchestrator:\n    def __init__(self, agents):\n        self.agents = agents\n        self.execution_queue = PriorityQueue()\n        self.performance_tracker = PerformanceTracker()\n\n    def optimize(self, target_system):\n        # Parallel agent execution with coordinated optimization\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            futures = {\n                executor.submit(agent.optimize, target_system): agent\n                for agent in self.agents\n            }\n\n            for future in concurrent.futures.as_completed(futures):\n                agent = futures[future]\n                result = future.result()\n                self.performance_tracker.log(agent, result)\n```\n\n## 4. Parallel Execution Optimization\n\n### Key Strategies\n- Asynchronous agent processing\n- Workload partitioning\n- Dynamic resource allocation\n- Minimal blocking operations\n\n## 5. Cost Optimization Strategies\n\n### LLM Cost Management\n- Token usage tracking\n- Adaptive model selection\n- Caching and result reuse\n- Efficient prompt engineering\n\n### Cost Tracking Example\n```python\nclass CostOptimizer:\n    def __init__(self):\n        self.token_budget = 100000  # Monthly budget\n        self.token_usage = 0\n        self.model_costs = {\n            'gpt-4': 0.03,\n            'claude-3-sonnet': 0.015,\n            'claude-3-haiku': 0.0025\n        }\n\n    def select_optimal_model(self, complexity):\n        # Dynamic model selection based on task complexity and budget\n        pass\n```\n\n## 6. Latency Reduction Techniques\n\n### Performance Acceleration\n- Predictive caching\n- Pre-warming agent contexts\n- Intelligent result memoization\n- Reduced round-trip communication\n\n## 7. Quality vs Speed Tradeoffs\n\n### Optimization Spectrum\n- Performance thresholds\n- Acceptable degradation margins\n- Quality-aware optimization\n- Intelligent compromise selection\n\n## 8. Monitoring and Continuous Improvement\n\n### Observability Framework\n- Real-time performance dashboards\n- Automated optimization feedback loops\n- Machine learning-driven improvement\n- Adaptive optimization strategies\n\n## Reference Workflows\n\n### Workflow 1: E-Commerce Platform Optimization\n1. Initial performance profiling\n2. Agent-based optimization\n3. Cost and performance tracking\n4. Continuous improvement cycle\n\n### Workflow 2: Enterprise API Performance Enhancement\n1. Comprehensive system analysis\n2. Multi-layered agent optimization\n3. Iterative performance refinement\n4. Cost-efficient scaling strategy\n\n## Key Considerations\n- Always measure before and after optimization\n- Maintain system stability during optimization\n- Balance performance gains with resource consumption\n- Implement gradual, reversible changes\n\nTarget Optimization: $ARGUMENTS"
    },
    {
      "name": "improve-agent",
      "title": "Agent Performance Optimization Workflow",
      "description": "Systematic improvement of existing agents through performance analysis, prompt engineering, and continuous iteration.",
      "plugin": "agent-orchestration",
      "source_path": "plugins/agent-orchestration/commands/improve-agent.md",
      "category": "ai-ml",
      "keywords": [
        "multi-agent",
        "orchestration",
        "ai-agents",
        "optimization"
      ],
      "content": "# Agent Performance Optimization Workflow\n\nSystematic improvement of existing agents through performance analysis, prompt engineering, and continuous iteration.\n\n[Extended thinking: Agent optimization requires a data-driven approach combining performance metrics, user feedback analysis, and advanced prompt engineering techniques. Success depends on systematic evaluation, targeted improvements, and rigorous testing with rollback capabilities for production safety.]\n\n## Phase 1: Performance Analysis and Baseline Metrics\n\nComprehensive analysis of agent performance using context-manager for historical data collection.\n\n### 1.1 Gather Performance Data\n```\nUse: context-manager\nCommand: analyze-agent-performance $ARGUMENTS --days 30\n```\n\nCollect metrics including:\n- Task completion rate (successful vs failed tasks)\n- Response accuracy and factual correctness\n- Tool usage efficiency (correct tools, call frequency)\n- Average response time and token consumption\n- User satisfaction indicators (corrections, retries)\n- Hallucination incidents and error patterns\n\n### 1.2 User Feedback Pattern Analysis\n\nIdentify recurring patterns in user interactions:\n- **Correction patterns**: Where users consistently modify outputs\n- **Clarification requests**: Common areas of ambiguity\n- **Task abandonment**: Points where users give up\n- **Follow-up questions**: Indicators of incomplete responses\n- **Positive feedback**: Successful patterns to preserve\n\n### 1.3 Failure Mode Classification\n\nCategorize failures by root cause:\n- **Instruction misunderstanding**: Role or task confusion\n- **Output format errors**: Structure or formatting issues\n- **Context loss**: Long conversation degradation\n- **Tool misuse**: Incorrect or inefficient tool selection\n- **Constraint violations**: Safety or business rule breaches\n- **Edge case handling**: Unusual input scenarios\n\n### 1.4 Baseline Performance Report\n\nGenerate quantitative baseline metrics:\n```\nPerformance Baseline:\n- Task Success Rate: [X%]\n- Average Corrections per Task: [Y]\n- Tool Call Efficiency: [Z%]\n- User Satisfaction Score: [1-10]\n- Average Response Latency: [Xms]\n- Token Efficiency Ratio: [X:Y]\n```\n\n## Phase 2: Prompt Engineering Improvements\n\nApply advanced prompt optimization techniques using prompt-engineer agent.\n\n### 2.1 Chain-of-Thought Enhancement\n\nImplement structured reasoning patterns:\n```\nUse: prompt-engineer\nTechnique: chain-of-thought-optimization\n```\n\n- Add explicit reasoning steps: \"Let's approach this step-by-step...\"\n- Include self-verification checkpoints: \"Before proceeding, verify that...\"\n- Implement recursive decomposition for complex tasks\n- Add reasoning trace visibility for debugging\n\n### 2.2 Few-Shot Example Optimization\n\nCurate high-quality examples from successful interactions:\n- **Select diverse examples** covering common use cases\n- **Include edge cases** that previously failed\n- **Show both positive and negative examples** with explanations\n- **Order examples** from simple to complex\n- **Annotate examples** with key decision points\n\nExample structure:\n```\nGood Example:\nInput: [User request]\nReasoning: [Step-by-step thought process]\nOutput: [Successful response]\nWhy this works: [Key success factors]\n\nBad Example:\nInput: [Similar request]\nOutput: [Failed response]\nWhy this fails: [Specific issues]\nCorrect approach: [Fixed version]\n```\n\n### 2.3 Role Definition Refinement\n\nStrengthen agent identity and capabilities:\n- **Core purpose**: Clear, single-sentence mission\n- **Expertise domains**: Specific knowledge areas\n- **Behavioral traits**: Personality and interaction style\n- **Tool proficiency**: Available tools and when to use them\n- **Constraints**: What the agent should NOT do\n- **Success criteria**: How to measure task completion\n\n### 2.4 Constitutional AI Integration\n\nImplement self-correction mechanisms:\n```\nConstitutional Principles:\n1. Verify factual accuracy before responding\n2. Self-check for potential biases or harmful content\n3. Validate output format matches requirements\n4. Ensure response completeness\n5. Maintain consistency with previous responses\n```\n\nAdd critique-and-revise loops:\n- Initial response generation\n- Self-critique against principles\n- Automatic revision if issues detected\n- Final validation before output\n\n### 2.5 Output Format Tuning\n\nOptimize response structure:\n- **Structured templates** for common tasks\n- **Dynamic formatting** based on complexity\n- **Progressive disclosure** for detailed information\n- **Markdown optimization** for readability\n- **Code block formatting** with syntax highlighting\n- **Table and list generation** for data presentation\n\n## Phase 3: Testing and Validation\n\nComprehensive testing framework with A/B comparison.\n\n### 3.1 Test Suite Development\n\nCreate representative test scenarios:\n```\nTest Categories:\n1. Golden path scenarios (common successful cases)\n2. Previously failed tasks (regression testing)\n3. Edge cases and corner scenarios\n4. Stress tests (complex, multi-step tasks)\n5. Adversarial inputs (potential breaking points)\n6. Cross-domain tasks (combining capabilities)\n```\n\n### 3.2 A/B Testing Framework\n\nCompare original vs improved agent:\n```\nUse: parallel-test-runner\nConfig:\n  - Agent A: Original version\n  - Agent B: Improved version\n  - Test set: 100 representative tasks\n  - Metrics: Success rate, speed, token usage\n  - Evaluation: Blind human review + automated scoring\n```\n\nStatistical significance testing:\n- Minimum sample size: 100 tasks per variant\n- Confidence level: 95% (p < 0.05)\n- Effect size calculation (Cohen's d)\n- Power analysis for future tests\n\n### 3.3 Evaluation Metrics\n\nComprehensive scoring framework:\n\n**Task-Level Metrics:**\n- Completion rate (binary success/failure)\n- Correctness score (0-100% accuracy)\n- Efficiency score (steps taken vs optimal)\n- Tool usage appropriateness\n- Response relevance and completeness\n\n**Quality Metrics:**\n- Hallucination rate (factual errors per response)\n- Consistency score (alignment with previous responses)\n- Format compliance (matches specified structure)\n- Safety score (constraint adherence)\n- User satisfaction prediction\n\n**Performance Metrics:**\n- Response latency (time to first token)\n- Total generation time\n- Token consumption (input + output)\n- Cost per task (API usage fees)\n- Memory/context efficiency\n\n### 3.4 Human Evaluation Protocol\n\nStructured human review process:\n- Blind evaluation (evaluators don't know version)\n- Standardized rubric with clear criteria\n- Multiple evaluators per sample (inter-rater reliability)\n- Qualitative feedback collection\n- Preference ranking (A vs B comparison)\n\n## Phase 4: Version Control and Deployment\n\nSafe rollout with monitoring and rollback capabilities.\n\n### 4.1 Version Management\n\nSystematic versioning strategy:\n```\nVersion Format: agent-name-v[MAJOR].[MINOR].[PATCH]\nExample: customer-support-v2.3.1\n\nMAJOR: Significant capability changes\nMINOR: Prompt improvements, new examples\nPATCH: Bug fixes, minor adjustments\n```\n\nMaintain version history:\n- Git-based prompt storage\n- Changelog with improvement details\n- Performance metrics per version\n- Rollback procedures documented\n\n### 4.2 Staged Rollout\n\nProgressive deployment strategy:\n1. **Alpha testing**: Internal team validation (5% traffic)\n2. **Beta testing**: Selected users (20% traffic)\n3. **Canary release**: Gradual increase (20% \u2192 50% \u2192 100%)\n4. **Full deployment**: After success criteria met\n5. **Monitoring period**: 7-day observation window\n\n### 4.3 Rollback Procedures\n\nQuick recovery mechanism:\n```\nRollback Triggers:\n- Success rate drops >10% from baseline\n- Critical errors increase >5%\n- User complaints spike\n- Cost per task increases >20%\n- Safety violations detected\n\nRollback Process:\n1. Detect issue via monitoring\n2. Alert team immediately\n3. Switch to previous stable version\n4. Analyze root cause\n5. Fix and re-test before retry\n```\n\n### 4.4 Continuous Monitoring\n\nReal-time performance tracking:\n- Dashboard with key metrics\n- Anomaly detection alerts\n- User feedback collection\n- Automated regression testing\n- Weekly performance reports\n\n## Success Criteria\n\nAgent improvement is successful when:\n- Task success rate improves by \u226515%\n- User corrections decrease by \u226525%\n- No increase in safety violations\n- Response time remains within 10% of baseline\n- Cost per task doesn't increase >5%\n- Positive user feedback increases\n\n## Post-Deployment Review\n\nAfter 30 days of production use:\n1. Analyze accumulated performance data\n2. Compare against baseline and targets\n3. Identify new improvement opportunities\n4. Document lessons learned\n5. Plan next optimization cycle\n\n## Continuous Improvement Cycle\n\nEstablish regular improvement cadence:\n- **Weekly**: Monitor metrics and collect feedback\n- **Monthly**: Analyze patterns and plan improvements\n- **Quarterly**: Major version updates with new capabilities\n- **Annually**: Strategic review and architecture updates\n\nRemember: Agent optimization is an iterative process. Each cycle builds upon previous learnings, gradually improving performance while maintaining stability and safety."
    },
    {
      "name": "context-save",
      "title": "Context Save Tool: Intelligent Context Management Specialist",
      "description": "An elite context engineering specialist focused on comprehensive, semantic, and dynamically adaptable context preservation across AI workflows. This tool orchestrates advanced context capture, seriali",
      "plugin": "context-management",
      "source_path": "plugins/context-management/commands/context-save.md",
      "category": "ai-ml",
      "keywords": [
        "context",
        "persistence",
        "conversation",
        "memory"
      ],
      "content": "# Context Save Tool: Intelligent Context Management Specialist\n\n## Role and Purpose\nAn elite context engineering specialist focused on comprehensive, semantic, and dynamically adaptable context preservation across AI workflows. This tool orchestrates advanced context capture, serialization, and retrieval strategies to maintain institutional knowledge and enable seamless multi-session collaboration.\n\n## Context Management Overview\nThe Context Save Tool is a sophisticated context engineering solution designed to:\n- Capture comprehensive project state and knowledge\n- Enable semantic context retrieval\n- Support multi-agent workflow coordination\n- Preserve architectural decisions and project evolution\n- Facilitate intelligent knowledge transfer\n\n## Requirements and Argument Handling\n\n### Input Parameters\n- `$PROJECT_ROOT`: Absolute path to project root\n- `$CONTEXT_TYPE`: Granularity of context capture (minimal, standard, comprehensive)\n- `$STORAGE_FORMAT`: Preferred storage format (json, markdown, vector)\n- `$TAGS`: Optional semantic tags for context categorization\n\n## Context Extraction Strategies\n\n### 1. Semantic Information Identification\n- Extract high-level architectural patterns\n- Capture decision-making rationales\n- Identify cross-cutting concerns and dependencies\n- Map implicit knowledge structures\n\n### 2. State Serialization Patterns\n- Use JSON Schema for structured representation\n- Support nested, hierarchical context models\n- Implement type-safe serialization\n- Enable lossless context reconstruction\n\n### 3. Multi-Session Context Management\n- Generate unique context fingerprints\n- Support version control for context artifacts\n- Implement context drift detection\n- Create semantic diff capabilities\n\n### 4. Context Compression Techniques\n- Use advanced compression algorithms\n- Support lossy and lossless compression modes\n- Implement semantic token reduction\n- Optimize storage efficiency\n\n### 5. Vector Database Integration\nSupported Vector Databases:\n- Pinecone\n- Weaviate\n- Qdrant\n\nIntegration Features:\n- Semantic embedding generation\n- Vector index construction\n- Similarity-based context retrieval\n- Multi-dimensional knowledge mapping\n\n### 6. Knowledge Graph Construction\n- Extract relational metadata\n- Create ontological representations\n- Support cross-domain knowledge linking\n- Enable inference-based context expansion\n\n### 7. Storage Format Selection\nSupported Formats:\n- Structured JSON\n- Markdown with frontmatter\n- Protocol Buffers\n- MessagePack\n- YAML with semantic annotations\n\n## Code Examples\n\n### 1. Context Extraction\n```python\ndef extract_project_context(project_root, context_type='standard'):\n    context = {\n        'project_metadata': extract_project_metadata(project_root),\n        'architectural_decisions': analyze_architecture(project_root),\n        'dependency_graph': build_dependency_graph(project_root),\n        'semantic_tags': generate_semantic_tags(project_root)\n    }\n    return context\n```\n\n### 2. State Serialization Schema\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"project_name\": {\"type\": \"string\"},\n    \"version\": {\"type\": \"string\"},\n    \"context_fingerprint\": {\"type\": \"string\"},\n    \"captured_at\": {\"type\": \"string\", \"format\": \"date-time\"},\n    \"architectural_decisions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"decision_type\": {\"type\": \"string\"},\n          \"rationale\": {\"type\": \"string\"},\n          \"impact_score\": {\"type\": \"number\"}\n        }\n      }\n    }\n  }\n}\n```\n\n### 3. Context Compression Algorithm\n```python\ndef compress_context(context, compression_level='standard'):\n    strategies = {\n        'minimal': remove_redundant_tokens,\n        'standard': semantic_compression,\n        'comprehensive': advanced_vector_compression\n    }\n    compressor = strategies.get(compression_level, semantic_compression)\n    return compressor(context)\n```\n\n## Reference Workflows\n\n### Workflow 1: Project Onboarding Context Capture\n1. Analyze project structure\n2. Extract architectural decisions\n3. Generate semantic embeddings\n4. Store in vector database\n5. Create markdown summary\n\n### Workflow 2: Long-Running Session Context Management\n1. Periodically capture context snapshots\n2. Detect significant architectural changes\n3. Version and archive context\n4. Enable selective context restoration\n\n## Advanced Integration Capabilities\n- Real-time context synchronization\n- Cross-platform context portability\n- Compliance with enterprise knowledge management standards\n- Support for multi-modal context representation\n\n## Limitations and Considerations\n- Sensitive information must be explicitly excluded\n- Context capture has computational overhead\n- Requires careful configuration for optimal performance\n\n## Future Roadmap\n- Improved ML-driven context compression\n- Enhanced cross-domain knowledge transfer\n- Real-time collaborative context editing\n- Predictive context recommendation systems"
    },
    {
      "name": "context-restore",
      "title": "Context Restoration: Advanced Semantic Memory Rehydration",
      "description": "Expert Context Restoration Specialist focused on intelligent, semantic-aware context retrieval and reconstruction across complex multi-agent AI workflows. Specializes in preserving and reconstructing ",
      "plugin": "context-management",
      "source_path": "plugins/context-management/commands/context-restore.md",
      "category": "ai-ml",
      "keywords": [
        "context",
        "persistence",
        "conversation",
        "memory"
      ],
      "content": "# Context Restoration: Advanced Semantic Memory Rehydration\n\n## Role Statement\n\nExpert Context Restoration Specialist focused on intelligent, semantic-aware context retrieval and reconstruction across complex multi-agent AI workflows. Specializes in preserving and reconstructing project knowledge with high fidelity and minimal information loss.\n\n## Context Overview\n\nThe Context Restoration tool is a sophisticated memory management system designed to:\n- Recover and reconstruct project context across distributed AI workflows\n- Enable seamless continuity in complex, long-running projects\n- Provide intelligent, semantically-aware context rehydration\n- Maintain historical knowledge integrity and decision traceability\n\n## Core Requirements and Arguments\n\n### Input Parameters\n- `context_source`: Primary context storage location (vector database, file system)\n- `project_identifier`: Unique project namespace\n- `restoration_mode`:\n  - `full`: Complete context restoration\n  - `incremental`: Partial context update\n  - `diff`: Compare and merge context versions\n- `token_budget`: Maximum context tokens to restore (default: 8192)\n- `relevance_threshold`: Semantic similarity cutoff for context components (default: 0.75)\n\n## Advanced Context Retrieval Strategies\n\n### 1. Semantic Vector Search\n- Utilize multi-dimensional embedding models for context retrieval\n- Employ cosine similarity and vector clustering techniques\n- Support multi-modal embedding (text, code, architectural diagrams)\n\n```python\ndef semantic_context_retrieve(project_id, query_vector, top_k=5):\n    \"\"\"Semantically retrieve most relevant context vectors\"\"\"\n    vector_db = VectorDatabase(project_id)\n    matching_contexts = vector_db.search(\n        query_vector,\n        similarity_threshold=0.75,\n        max_results=top_k\n    )\n    return rank_and_filter_contexts(matching_contexts)\n```\n\n### 2. Relevance Filtering and Ranking\n- Implement multi-stage relevance scoring\n- Consider temporal decay, semantic similarity, and historical impact\n- Dynamic weighting of context components\n\n```python\ndef rank_context_components(contexts, current_state):\n    \"\"\"Rank context components based on multiple relevance signals\"\"\"\n    ranked_contexts = []\n    for context in contexts:\n        relevance_score = calculate_composite_score(\n            semantic_similarity=context.semantic_score,\n            temporal_relevance=context.age_factor,\n            historical_impact=context.decision_weight\n        )\n        ranked_contexts.append((context, relevance_score))\n\n    return sorted(ranked_contexts, key=lambda x: x[1], reverse=True)\n```\n\n### 3. Context Rehydration Patterns\n- Implement incremental context loading\n- Support partial and full context reconstruction\n- Manage token budgets dynamically\n\n```python\ndef rehydrate_context(project_context, token_budget=8192):\n    \"\"\"Intelligent context rehydration with token budget management\"\"\"\n    context_components = [\n        'project_overview',\n        'architectural_decisions',\n        'technology_stack',\n        'recent_agent_work',\n        'known_issues'\n    ]\n\n    prioritized_components = prioritize_components(context_components)\n    restored_context = {}\n\n    current_tokens = 0\n    for component in prioritized_components:\n        component_tokens = estimate_tokens(component)\n        if current_tokens + component_tokens <= token_budget:\n            restored_context[component] = load_component(component)\n            current_tokens += component_tokens\n\n    return restored_context\n```\n\n### 4. Session State Reconstruction\n- Reconstruct agent workflow state\n- Preserve decision trails and reasoning contexts\n- Support multi-agent collaboration history\n\n### 5. Context Merging and Conflict Resolution\n- Implement three-way merge strategies\n- Detect and resolve semantic conflicts\n- Maintain provenance and decision traceability\n\n### 6. Incremental Context Loading\n- Support lazy loading of context components\n- Implement context streaming for large projects\n- Enable dynamic context expansion\n\n### 7. Context Validation and Integrity Checks\n- Cryptographic context signatures\n- Semantic consistency verification\n- Version compatibility checks\n\n### 8. Performance Optimization\n- Implement efficient caching mechanisms\n- Use probabilistic data structures for context indexing\n- Optimize vector search algorithms\n\n## Reference Workflows\n\n### Workflow 1: Project Resumption\n1. Retrieve most recent project context\n2. Validate context against current codebase\n3. Selectively restore relevant components\n4. Generate resumption summary\n\n### Workflow 2: Cross-Project Knowledge Transfer\n1. Extract semantic vectors from source project\n2. Map and transfer relevant knowledge\n3. Adapt context to target project's domain\n4. Validate knowledge transferability\n\n## Usage Examples\n\n```bash\n# Full context restoration\ncontext-restore project:ai-assistant --mode full\n\n# Incremental context update\ncontext-restore project:web-platform --mode incremental\n\n# Semantic context query\ncontext-restore project:ml-pipeline --query \"model training strategy\"\n```\n\n## Integration Patterns\n- RAG (Retrieval Augmented Generation) pipelines\n- Multi-agent workflow coordination\n- Continuous learning systems\n- Enterprise knowledge management\n\n## Future Roadmap\n- Enhanced multi-modal embedding support\n- Quantum-inspired vector search algorithms\n- Self-healing context reconstruction\n- Adaptive learning context strategies"
    },
    {
      "name": "ml-pipeline",
      "title": "Machine Learning Pipeline - Multi-Agent MLOps Orchestration",
      "description": "Design and implement a complete ML pipeline for: $ARGUMENTS",
      "plugin": "machine-learning-ops",
      "source_path": "plugins/machine-learning-ops/commands/ml-pipeline.md",
      "category": "ai-ml",
      "keywords": [
        "machine-learning",
        "mlops",
        "model-training",
        "tensorflow",
        "pytorch",
        "mlflow"
      ],
      "content": "# Machine Learning Pipeline - Multi-Agent MLOps Orchestration\n\nDesign and implement a complete ML pipeline for: $ARGUMENTS\n\n## Thinking\n\nThis workflow orchestrates multiple specialized agents to build a production-ready ML pipeline following modern MLOps best practices. The approach emphasizes:\n\n- **Phase-based coordination**: Each phase builds upon previous outputs, with clear handoffs between agents\n- **Modern tooling integration**: MLflow/W&B for experiments, Feast/Tecton for features, KServe/Seldon for serving\n- **Production-first mindset**: Every component designed for scale, monitoring, and reliability\n- **Reproducibility**: Version control for data, models, and infrastructure\n- **Continuous improvement**: Automated retraining, A/B testing, and drift detection\n\nThe multi-agent approach ensures each aspect is handled by domain experts:\n- Data engineers handle ingestion and quality\n- Data scientists design features and experiments\n- ML engineers implement training pipelines\n- MLOps engineers handle production deployment\n- Observability engineers ensure monitoring\n\n## Phase 1: Data & Requirements Analysis\n\n<Task>\nsubagent_type: data-engineer\nprompt: |\n  Analyze and design data pipeline for ML system with requirements: $ARGUMENTS\n\n  Deliverables:\n  1. Data source audit and ingestion strategy:\n     - Source systems and connection patterns\n     - Schema validation using Pydantic/Great Expectations\n     - Data versioning with DVC or lakeFS\n     - Incremental loading and CDC strategies\n\n  2. Data quality framework:\n     - Profiling and statistics generation\n     - Anomaly detection rules\n     - Data lineage tracking\n     - Quality gates and SLAs\n\n  3. Storage architecture:\n     - Raw/processed/feature layers\n     - Partitioning strategy\n     - Retention policies\n     - Cost optimization\n\n  Provide implementation code for critical components and integration patterns.\n</Task>\n\n<Task>\nsubagent_type: data-scientist\nprompt: |\n  Design feature engineering and model requirements for: $ARGUMENTS\n  Using data architecture from: {phase1.data-engineer.output}\n\n  Deliverables:\n  1. Feature engineering pipeline:\n     - Transformation specifications\n     - Feature store schema (Feast/Tecton)\n     - Statistical validation rules\n     - Handling strategies for missing data/outliers\n\n  2. Model requirements:\n     - Algorithm selection rationale\n     - Performance metrics and baselines\n     - Training data requirements\n     - Evaluation criteria and thresholds\n\n  3. Experiment design:\n     - Hypothesis and success metrics\n     - A/B testing methodology\n     - Sample size calculations\n     - Bias detection approach\n\n  Include feature transformation code and statistical validation logic.\n</Task>\n\n## Phase 2: Model Development & Training\n\n<Task>\nsubagent_type: ml-engineer\nprompt: |\n  Implement training pipeline based on requirements: {phase1.data-scientist.output}\n  Using data pipeline: {phase1.data-engineer.output}\n\n  Build comprehensive training system:\n  1. Training pipeline implementation:\n     - Modular training code with clear interfaces\n     - Hyperparameter optimization (Optuna/Ray Tune)\n     - Distributed training support (Horovod/PyTorch DDP)\n     - Cross-validation and ensemble strategies\n\n  2. Experiment tracking setup:\n     - MLflow/Weights & Biases integration\n     - Metric logging and visualization\n     - Artifact management (models, plots, data samples)\n     - Experiment comparison and analysis tools\n\n  3. Model registry integration:\n     - Version control and tagging strategy\n     - Model metadata and lineage\n     - Promotion workflows (dev -> staging -> prod)\n     - Rollback procedures\n\n  Provide complete training code with configuration management.\n</Task>\n\n<Task>\nsubagent_type: python-pro\nprompt: |\n  Optimize and productionize ML code from: {phase2.ml-engineer.output}\n\n  Focus areas:\n  1. Code quality and structure:\n     - Refactor for production standards\n     - Add comprehensive error handling\n     - Implement proper logging with structured formats\n     - Create reusable components and utilities\n\n  2. Performance optimization:\n     - Profile and optimize bottlenecks\n     - Implement caching strategies\n     - Optimize data loading and preprocessing\n     - Memory management for large-scale training\n\n  3. Testing framework:\n     - Unit tests for data transformations\n     - Integration tests for pipeline components\n     - Model quality tests (invariance, directional)\n     - Performance regression tests\n\n  Deliver production-ready, maintainable code with full test coverage.\n</Task>\n\n## Phase 3: Production Deployment & Serving\n\n<Task>\nsubagent_type: mlops-engineer\nprompt: |\n  Design production deployment for models from: {phase2.ml-engineer.output}\n  With optimized code from: {phase2.python-pro.output}\n\n  Implementation requirements:\n  1. Model serving infrastructure:\n     - REST/gRPC APIs with FastAPI/TorchServe\n     - Batch prediction pipelines (Airflow/Kubeflow)\n     - Stream processing (Kafka/Kinesis integration)\n     - Model serving platforms (KServe/Seldon Core)\n\n  2. Deployment strategies:\n     - Blue-green deployments for zero downtime\n     - Canary releases with traffic splitting\n     - Shadow deployments for validation\n     - A/B testing infrastructure\n\n  3. CI/CD pipeline:\n     - GitHub Actions/GitLab CI workflows\n     - Automated testing gates\n     - Model validation before deployment\n     - ArgoCD for GitOps deployment\n\n  4. Infrastructure as Code:\n     - Terraform modules for cloud resources\n     - Helm charts for Kubernetes deployments\n     - Docker multi-stage builds for optimization\n     - Secret management with Vault/Secrets Manager\n\n  Provide complete deployment configuration and automation scripts.\n</Task>\n\n<Task>\nsubagent_type: kubernetes-architect\nprompt: |\n  Design Kubernetes infrastructure for ML workloads from: {phase3.mlops-engineer.output}\n\n  Kubernetes-specific requirements:\n  1. Workload orchestration:\n     - Training job scheduling with Kubeflow\n     - GPU resource allocation and sharing\n     - Spot/preemptible instance integration\n     - Priority classes and resource quotas\n\n  2. Serving infrastructure:\n     - HPA/VPA for autoscaling\n     - KEDA for event-driven scaling\n     - Istio service mesh for traffic management\n     - Model caching and warm-up strategies\n\n  3. Storage and data access:\n     - PVC strategies for training data\n     - Model artifact storage with CSI drivers\n     - Distributed storage for feature stores\n     - Cache layers for inference optimization\n\n  Provide Kubernetes manifests and Helm charts for entire ML platform.\n</Task>\n\n## Phase 4: Monitoring & Continuous Improvement\n\n<Task>\nsubagent_type: observability-engineer\nprompt: |\n  Implement comprehensive monitoring for ML system deployed in: {phase3.mlops-engineer.output}\n  Using Kubernetes infrastructure: {phase3.kubernetes-architect.output}\n\n  Monitoring framework:\n  1. Model performance monitoring:\n     - Prediction accuracy tracking\n     - Latency and throughput metrics\n     - Feature importance shifts\n     - Business KPI correlation\n\n  2. Data and model drift detection:\n     - Statistical drift detection (KS test, PSI)\n     - Concept drift monitoring\n     - Feature distribution tracking\n     - Automated drift alerts and reports\n\n  3. System observability:\n     - Prometheus metrics for all components\n     - Grafana dashboards for visualization\n     - Distributed tracing with Jaeger/Zipkin\n     - Log aggregation with ELK/Loki\n\n  4. Alerting and automation:\n     - PagerDuty/Opsgenie integration\n     - Automated retraining triggers\n     - Performance degradation workflows\n     - Incident response runbooks\n\n  5. Cost tracking:\n     - Resource utilization metrics\n     - Cost allocation by model/experiment\n     - Optimization recommendations\n     - Budget alerts and controls\n\n  Deliver monitoring configuration, dashboards, and alert rules.\n</Task>\n\n## Configuration Options\n\n- **experiment_tracking**: mlflow | wandb | neptune | clearml\n- **feature_store**: feast | tecton | databricks | custom\n- **serving_platform**: kserve | seldon | torchserve | triton\n- **orchestration**: kubeflow | airflow | prefect | dagster\n- **cloud_provider**: aws | azure | gcp | multi-cloud\n- **deployment_mode**: realtime | batch | streaming | hybrid\n- **monitoring_stack**: prometheus | datadog | newrelic | custom\n\n## Success Criteria\n\n1. **Data Pipeline Success**:\n   - < 0.1% data quality issues in production\n   - Automated data validation passing 99.9% of time\n   - Complete data lineage tracking\n   - Sub-second feature serving latency\n\n2. **Model Performance**:\n   - Meeting or exceeding baseline metrics\n   - < 5% performance degradation before retraining\n   - Successful A/B tests with statistical significance\n   - No undetected model drift > 24 hours\n\n3. **Operational Excellence**:\n   - 99.9% uptime for model serving\n   - < 200ms p99 inference latency\n   - Automated rollback within 5 minutes\n   - Complete observability with < 1 minute alert time\n\n4. **Development Velocity**:\n   - < 1 hour from commit to production\n   - Parallel experiment execution\n   - Reproducible training runs\n   - Self-service model deployment\n\n5. **Cost Efficiency**:\n   - < 20% infrastructure waste\n   - Optimized resource allocation\n   - Automatic scaling based on load\n   - Spot instance utilization > 60%\n\n## Final Deliverables\n\nUpon completion, the orchestrated pipeline will provide:\n- End-to-end ML pipeline with full automation\n- Comprehensive documentation and runbooks\n- Production-ready infrastructure as code\n- Complete monitoring and alerting system\n- CI/CD pipelines for continuous improvement\n- Cost optimization and scaling strategies\n- Disaster recovery and rollback procedures"
    }
  ]
}